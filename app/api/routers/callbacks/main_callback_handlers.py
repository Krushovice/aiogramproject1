import requests
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from api.markups import (
    MenuCbData,
    MenuActions,
    build_account_kb,
    build_main_kb,
    build_book_interaction_kb,
)

from api.crud import AsyncOrm
from utils import LEXICON, ai_helper, get_favorite_book, parse_book_info

router = Router(name=__name__)


@router.callback_query(MenuCbData.filter(F.action == MenuActions.profile))
async def handle_profile_button(call: CallbackQuery, session: AsyncSession):
    await call.answer()
    user = await AsyncOrm.get_user(
        session=session,
        tg_id=call.from_user.id,
    )
    favorite_book = await get_favorite_book(session=session, user_id=user.id)
    # –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —á–∏—Ç–∞—Ç–µ–ª—è
    text = (
        "<b>–ö–∞—Ä—Ç–æ—á–∫–∞ —á–∏—Ç–∞—Ç–µ–ª—è</b> ü™™\n\n"
        f"–ù–∏–∫–Ω–µ–π–º: {user.username if user.username else user.full_name}\n"
        f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ : 0\n"
        f"–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä: {user.favorite_genre if user.favorite_genre else ""}\n"
        f"–õ—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞: {favorite_book.title if favorite_book else ""}\n"
    )
    await call.message.edit_caption(
        caption=text,
        reply_markup=build_account_kb(),
    )


@router.callback_query(MenuCbData.filter(F.action == MenuActions.advice))
async def handle_advice_button(call: CallbackQuery, session: AsyncSession):
    await call.answer()
    user = await AsyncOrm.get_user(
        session=session,
        tg_id=call.from_user.id,
    )
    user_book_assoc = await AsyncOrm.select_user_read_books(
        session=session, user_id=user.id
    )
    books = set()
    for user_book_detail in user_book_assoc:
        books.add(user_book_detail.book.title)
    message = (
        f'–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–¥–Ω—É –∫–Ω–∏–≥—É, –∏—Å—Ö–æ–¥—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ{",".join(books)}.'
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º."
        '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –∫–æ–≤—ã—á–µ–∫ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é:".'
        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Ç–æ—á–∫–æ–π"
        "–ö–Ω–∏–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ books –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ö–æ–∂–µ–π –ø–æ –∂–∞–Ω—Ä—É"
    )

    try:
        token = ai_helper.create_token()
        res = ai_helper.send_prompt(token=token, message=message)
        print(res)
        book_title = parse_book_info(res)
        await call.message.edit_caption(
            caption=res,
            reply_markup=build_book_interaction_kb(book_cb_data=book_title),
        )

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥–∏–≥–∞—á–∞—Ç –∞–ø–∏ {e}")


@router.callback_query(MenuCbData.filter(F.action == MenuActions.support))
async def handle_support_button(call: CallbackQuery):
    await call.answer()


@router.callback_query(MenuCbData.filter(F.action == MenuActions.friends))
async def handle_friends_button(call: CallbackQuery):
    await call.answer()
